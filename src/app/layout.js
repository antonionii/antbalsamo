// import localFont from "next/font/local";
// import "./globals.css";

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({ children }) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }

"use client"


import React, { useEffect, useState } from "react";
//GlobalStyle
import GlobalStyle from "./styles/GlobalStyle";
//Import Pages
import Nav from "./components/Nav";

//Animation
import { AnimatePresence } from "framer-motion";
import ScrollToTop from "./components/ScrollToTop";
//Router
import { changeColor } from "./components/theme/changeColor";
import Footer from "./components/Footer";
//Google analytics
import ReactGA from "react-ga";

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  

  const [colorSchemeType, setColorSchemeType] = useState("light");


    // This effect triggers the scroll after navigation and animation completes
    useEffect(() => {
      const scrollToTop = () => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      };

    // Call scrollToTop after a slight delay (to ensure animation completes)
    const timeout = setTimeout(() => {
      scrollToTop();
    }, 500); // Adjust this delay to match the exit animation duration

    return () => clearTimeout(timeout); // Cleanup the timeout
  }, [location]); // Runs when location (path) changes

  
  const doRippleEffect = (evt) => {
    const ripple = document.createElement("div");

    ripple.className = "ripple";

    document.body.appendChild(ripple);

    ripple.style.cssText = `
      left: ${evt.clientX}px;
      top: ${evt.clientY}px;
      animation: .5s ease-in-out ripple-effect;
      z-index: 20;
    `;
    ripple.onanimationend = () => document.body.removeChild(ripple);
  };

  const handleBgClick = (evt) => {
    const isNavLink = evt.target.closest('a')
    const isButton = evt.target.closest('button')
    const isIcon = evt.target.closest('[data-icon="true"]');  // Use the data attribute to identify the icon    
    if(!isNavLink && !isButton && !isIcon) {
    setColorSchemeType("light");
    changeColor("light");
    doRippleEffect(evt);
    setTimeout(() => {
      doRippleEffect(evt);
    }, 240);
  };
  };

  useEffect(() => {
    if (colorSchemeType === "light") {
      // change color will pick a new light color
      changeColor("light");
    } else {
      changeColor("dark");
    }
  }, [colorSchemeType]);
  

  return (
    <html lang="en">
       <head>
        <link
          href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"
          rel="stylesheet"
        />
        </head>
      <body>
      
    <div className="App" onClick={(evt) => handleBgClick(evt)}>
      {/* <ScrollToTop> */}
        <GlobalStyle />
        <Nav
          colorSchemeType={colorSchemeType}
          setColorSchemeType={setColorSchemeType}
        />

        <div style={{ marginTop: "9vh" }}>
          <AnimatePresence exitBeforeEnter>
          
            {children}
          </AnimatePresence>
        </div>
        <Footer />
      {/* </ScrollToTop> */}
    </div>
     </body>
    </html>
  );
};

